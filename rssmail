#!/bin/bash
#
# rssmail
#
# Process rss feeds and act on new items
#

CONFIG="$HOME/.rssmail.cfg /etc/rssmail.cfg"
DEBUG=0

kanboard() {
   curl -s -u "jsonrpc:${kanboardapikey[main]}" -d @- "${kanboardapi[main]}"
}

processfeed() {
   name="$1"
   lasttime="$2"
   url="$3"

   tmpfile=$( mktemp )
   new=0
   err=0
   maxtime="$lasttime"
   WGETFLAGS="$WGETFLAGS -q --timeout=10"

   debug 2 "Processing feed $name (last time $lasttime)"

   wget $WGETFLAGS -O "$tmpfile" "$url" || { >&2 echo "Feed ($name): Error retrieving $url."; rm -f "$tmpfile"; return 1; }

   # First try standard parse
   $XML sel -t -m "//item" --var linebreak -n --break -o "titl:" -v "title" -n -o "link:" -v "link" -n -o "date:" -v "pubDate" -n -o "desc:" -v "translate(description, \$linebreak, '^')" -n "$tmpfile" 2> /dev/null > "$tmpfile.parsed"

   # Next try parse with different XML name spaces
   if test "$?" -ne "0"; then
      $XML sel -N purl="http://purl.org/rss/1.0/" -N dc="http://purl.org/dc/elements/1.1/" -t -m "//rdf:RDF/purl:item" --var linebreak -n --break -o "titl:" -v purl:title -n -o "link:" -v purl:link -n -o "date:" -v dc:date -n -o "desc:" -v "translate(purl:description, \$linebreak, '^')" -n "$tmpfile" 2> /dev/null > "$tmpfile.parsed"
      test "$?" -ne "0" && { >&2 echo "Error parsing feed from $url."; rm -f "$tmpfile" "$tmpfile.parsed"; return 1; }
   fi

   rm -f "$tmpfile"
   error=0
   skip=0
   while read -r line; do
      fn="${line/:*/}"
      data="${line/????:/}"
      case "$fn" in
         "date") time=$(date -d "$data" "+%s" 2> /dev/null) || { >&2 echo "Feed ($name): Error converting date format. ($data)"; error=1; }
         ;;
         "titl") title="$data"
            if test "${titleinclude[$name]}" != ""; then
               title=$(echo "$title" | egrep "${titleinclude[$name]}")
               test "$title" = "" && { skip=1; debug 3 "titleinclude filtered: $data"; }
            fi
            if test "${titleexclude[$name]}" != ""; then
               title=$(echo "$title" | egrep -v "${titleexclude[$name]}")
               test "$title" = "" && { skip=1; debug 3 "titleexclude filtered: $data"; }
            fi
         ;;
         "link") link="${data//&amp;/&}"
            if test "${linkinclude[$name]}" != ""; then
               link=$(echo "$link" | egrep "${linkinclude[$name]}")
               test "$link" = "" && { skip=1; debug 3 "linkinclude filtered: $data"; }
            fi
            if test "${linkexclude[$name]}" != ""; then
               link=$(echo "$link" | egrep -v "${linkexclude[$name]}")
               test "$link" = "" && { skip=1; debug 3 "linkexclude filtered: $data"; }
            fi
         ;;
         "desc")
            desc="$data"
            if test "$time" -gt "$lasttime" -a "$skip" -eq 0
            then
               if test "$error" -ne 0
               then
                  err=$(( err + 1 ))
               else
                  if test "$domail" -eq "1"; then
                     res=$(echo -e "<html><body><b>$title</b><p>${desc//^/\\n}<p><a href=$link>$link</a><p><i>Update: $(date -d @"$time" "+%Y/%m/%d %H:%M:%S")</i></body></html>" | mail -a 'Content-Type: text/html; charset="ISO-8859-1"' -r "$name <${emailfrom[main]}>" -s "$name: $title" "${emailto[main]}" 2>&1)
                     test ${PIPESTATUS[0]} -ne 0 && { >&2 echo "Feed ($name): Error sending mail ($res)."; error=1; }
                     new=$((new + 1))
                     debug 2 "Sent email for new item: $title"
                  fi
                  if test "$dokanboard" -eq "1"; then
                     res=$(echo '{ "jsonrpc": "2.0", "method": "createTask", "id": 2134420212, "params": { "title": "'$name: $title'", "project_id": '$kbprid', "description": "#Description\n\n'"$desc"'\n\n#Link\n\n'"$link"'" } }' | kanboard | jq -r '.error')
                     test "$res" != "null" && { >&2 echo "Feed ($name): Error adding task to kanboard (error: $res)."; err=$(($err + 1));}
                     test "$res" = "null" && new=$(($new + 1))
                     debug 2 "Adding kanboard entry for new item: $title"
                  fi
               fi
               test $time -gt $maxtime && maxtime=$time
            fi
            error=0
            skip=0
         ;;
      esac
   done < <(cat "$tmpfile".parsed | tr -d \'\" )
   rm -f "$tmpfile.parsed"
   debug 2 "Processing done, new: $new, error: $err, new time: $maxtime"
   echo "$maxtime" "$new" "$err"
}

readconfig() {
   cfg=""
   for file in $CONFIG
   do
      test -f "$file" && { cfg="$file"; break; }
   done
   test "$cfg" = "" && { >&2 echo "No valid config file found ($CONFIG)."; exit 1; }
   debug 4 "Selecting config filename: $cfg"

   # set defaults
   declare -g -A "xml[main]=xmlstarlet"

   while IFS='= ' read var val; do
      if test "${var:0:1}" != "#"; then
         if [[ $var == \[*] ]]; then
             section="${var:1:-1}"
             debug 4 "Found section: $section"
         elif [[ $val ]]; then
             declare -g -A "$var[$section]=$val"
             debug 4 "In section $section, found variable var ($var) with value: $val"
         fi
      fi
   done < $cfg
   debug 4 "Config read complete."

   test "${ipv4only[main]}" && { WGETFLAGS="-4"; debug 4 "IPv4 only variable set."; }
   test "${proxy[main]}" && { export http_proxy=${proxy[main]}; export https_proxy=${proxy[main]}; debug 4 "Proxy variables set."; }
   XML="${xml[main]}"
}

rewriteconfig() {
   debug 4 "Rewriting configuration file to temporary file"
   while read -r line; do
      IFS='= ' read var val < <(echo $line)
      if [[ $line == \[*] ]]; then
          section=${line:1:-1}
      fi
      if test "$val" -a "$var" = "timestamp" -a "${newtime[$section]}" != ""; then
         stamp=$( date -d "@${newtime[$section]}" "+%Y%m%d %H:%M:%S" )
         if test "$stamp" != "$val"; then
            echo "timestamp=$stamp"
            debug 4 "Updated section $section timestamp to $stamp (was $val)"
         else
            echo "$line"
         fi
      else
         echo "$line"
      fi
   done < "$cfg" > "$cfg.new"
   debug 4 "Renaming temporary file"
   test -f "$cfg.new" && mv "$cfg.new" "$cfg"
   debug 4 "Rewriting done"
}

sanitycheck() {
   ok=1

   for util in xmlstarlet sed mail curl jq egrep
   do
      ! which $util > /dev/null 2>&1 && { echo "$util not found, is required."; ok=0; }
   done
   test $dokanboard -eq 1 && test "${kanboardproject[main]}" = "" -o "${kanboardapikey[main]}" = "" -o "${kanboardapi[main]}" = "" && { echo "Kanboard insertion is requested, but kanboard configuration key(s) missing."; ok=0; }

   test $domail -eq 1 && test "${emailto[main]}" = "" -o "${emailfrom[main]}" = "" && { echo "Email sending reqested, but mail configuration key(s) missing."; ok=1; }

   test $ok -ne 1 && exit
}

usage() {
   echo "Usage: $0 [OPTION]"
   echo "Check all configured RSS feeds for updates and mail them."
   echo
   echo "Arguments:"
   echo "  -m              Send rss items through email."
   echo "  -k              Insert rss items into kaboard."
   echo "  -K              Insert rss items into kanboard and mail when items are added."
   echo "  -c <file>       Use specific config file."
   echo "  -d              Increase debug level"
   echo "  -h              Show this usage information."
   exit 1
}

parseoptions() {
   domail=0
   dokanboard=0
   dokanmail=0

   while getopts :c:hkKdm opt; do
      case $opt in
         k) dokanboard=1
         ;;
         K) dokanboard=1
            dokanmail=1
         ;;
         m) domail=1
         ;;
         c) CONFIG=$OPTARG
         ;;
         d) DEBUG=$(( $DEBUG + 1 ))
         ;;
         h) usage
         ;;
         \?) echo "Unknown option: -$OPTARG"
             usage
         ;;
         :) echo "Option -$OPTARG requires argument"
            usage
         ;;
      esac
   done
   test $domail -eq 0 -a $dokanboard -eq 0 && { echo "Specify an action."; usage; }

}

debug() {
   test $DEBUG -ge $1 && { >&2 echo "$(date "+%Y%m%d %H:%M:%S") [$1] $2"; }
}

main() {
   parseoptions "$@"
   readconfig
   sanitycheck

   if test $dokanboard -eq 1; then
      kbprid=$(echo '{"jsonrpc": "2.0", "method": "getProjectByName", "id": 1, "params": { "name": "'${kanboardproject[main]}'" }}' | kanboard | jq -r '.result.id')
      test "$kbprid" = "null" && { >&2 echo "Kanboard project $kanboardproject not found."; exit 1; }
   fi

   itemsok=0
   itemserr=0
   declare -g -A newtime
   for name in ${!timestamp[@]}; do
      debug 1 "Starting feed $name"
      if test "${timestamp[$name]}" = ""; then
         timestamp[$name]=$( date "+%s" )
      else
         timestamp[$name]=$( date -d "${timestamp[$name]}" "+%s" )
      fi
      read maxtime new err < <(processfeed "$name" "${timestamp[$name]}" "${url[$name]}" )
      if test "$maxtime" != ""; then
         itemsok=$(( $itemsok + $new ))
         itemserr=$(( $itemserr + $err ))
         newtime[$name]=$maxtime
      fi
   done
   debug 1 "Feed processing done."
   test $(( $itemsok + $itemserr )) -gt 0 -a $dokanmail -eq 1 && { ( test $itemsok -gt 0 && echo -e "There are $itemsok items added to kanboard ${kanboardproject[main]}."; test $itemserr -gt 0 && echo -e "There are $itemserr items that failed to parse." ) | mail -r "${emailfrom[main]}" -s "rssmail: $itemsok items added to kanboard" "${emailto[main]}"; }
   rewriteconfig
}

main "$@"
